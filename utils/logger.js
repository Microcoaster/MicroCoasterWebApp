/**
 * ================================================================================
 * MICROCOASTER WEBAPP - SYST√àME DE JOURNALISATION
 * ================================================================================
 *
 * @description Syst√®me de logs centralis√© utilisant Winston avec s√©paration par domaines
 * @author √âquipe MicroCoaster
 * @version 2.0
 *
 * Fonctionnalit√©s :
 * - Logs s√©par√©s par domaine (app, activity, modules, esp, system)
 * - Format console avec emojis pour une lecture facile
 * - Format JSON structur√© pour les fichiers
 * - Anti-spam pour les statistiques syst√®me
 * - Support des m√©tadonn√©es et stack traces
 *
 * Domaines de logs :
 * - app : D√©marrage, arr√™t, erreurs critiques de l'application
 * - activity : Connexions utilisateurs, navigation, actions utilisateur
 * - modules : Communications ESP32, t√©l√©m√©trie, √©tats modules
 * - esp : Logs d√©di√©s WebSocket natif ESP32
 * - system : Statistiques, monitoring, nettoyage syst√®me
 *
 * ================================================================================
 */

const winston = require('winston');
const fs = require('fs');

// Cr√©er le r√©pertoire logs s'il n'existe pas
const logDir = 'logs';
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir);
}

// Format de base pour tous les fichiers de logs
const fileFormat = winston.format.combine(
  winston.format.timestamp(),
  winston.format.errors({ stack: true }),
  winston.format.json()
);

// Format console √©pur√© - timestamp + emoji + message
const consoleFormat = winston.format.combine(
  winston.format.timestamp({ format: 'HH:mm:ss' }),
  winston.format.printf(({ timestamp, level, message }) => {
    const cleanMessage =
      typeof message === 'string' ? message.replace(/\{.*?\}/g, '').trim() : String(message);

    // Emoji selon le niveau de log
    let emoji = '';
    switch (level) {
      case 'error':
        emoji = '‚ùå';
        break;
      case 'warn':
        emoji = '‚ö†Ô∏è';
        break;
      case 'info':
        emoji = '‚ÑπÔ∏è';
        break;
      case 'debug':
        emoji = 'üîç';
        break;
      default:
        emoji = '‚ÑπÔ∏è';
    }

    return ` ${emoji}  ${timestamp} : ${cleanMessage}`;
  })
);

// ============================================================================
// LOGGERS SP√âCIALIS√âS PAR DOMAINE
// ============================================================================

/**
 * Logger principal de l'application
 * @description G√®re le d√©marrage, arr√™t, erreurs critiques et √©tat g√©n√©ral
 * @console Niveau info et plus √©lev√© affich√© en console
 * @file logs/app.log - Tous les niveaux sauvegard√©s
 */
const appLogger = winston.createLogger({
  level: 'debug',
  transports: [
    new winston.transports.Console({
      level: 'info', // Logs d'info importants en console
      format: consoleFormat, // Format clean (juste le message)
    }),
    new winston.transports.File({
      filename: 'logs/app.log',
      format: fileFormat,
    }),
  ],
});

/**
 * Logger d'activit√© utilisateur
 * @description Trace les connexions, d√©connexions, navigation et actions utilisateur
 * @console Niveau info et plus √©lev√© affich√© en console
 * @file logs/activity.log - Tous les niveaux sauvegard√©s
 */
const activityLogger = winston.createLogger({
  level: 'debug',
  transports: [
    new winston.transports.Console({
      level: 'info', // Activit√© utilisateur importante en console
      format: consoleFormat,
    }),
    new winston.transports.File({
      filename: 'logs/activity.log',
      format: fileFormat,
    }),
  ],
});

/**
 * Logger des modules IoT
 * @description G√®re les communications ESP32, t√©l√©m√©trie et √©tats des modules
 * @console Aucun affichage console (√©vite le spam)
 * @file logs/modules.log - Tous les niveaux sauvegard√©s
 */
const modulesLogger = winston.createLogger({
  level: 'debug',
  transports: [
    new winston.transports.File({
      filename: 'logs/modules.log',
      format: fileFormat,
    }),
  ],
});

/**
 * Logger ESP32 d√©di√©
 * @description Sp√©cialis√© pour les connexions WebSocket natives des modules ESP32
 * @console Aucun affichage console
 * @file logs/esp.log - Communications WebSocket ESP32 uniquement
 */
const espLogger = winston.createLogger({
  level: 'debug',
  transports: [
    new winston.transports.File({
      filename: 'logs/esp.log',
      format: fileFormat,
    }),
  ],
});

/**
 * Logger syst√®me et monitoring
 * @description Statistiques avec anti-spam, nettoyage et monitoring syst√®me
 * @console Aucun affichage console
 * @file logs/system.log - Monitoring et statistiques syst√®me
 */
const systemLogger = winston.createLogger({
  level: 'debug',
  transports: [
    new winston.transports.File({
      filename: 'logs/system.log',
      format: fileFormat,
    }),
  ],
});

// ============================================================================
// SYST√àME ANTI-SPAM POUR STATISTIQUES
// ============================================================================

/**
 * Derni√®res statistiques syst√®me enregistr√©es
 * @type {Object|null}
 */
let lastSystemStats = null;

/**
 * D√©termine si les statistiques syst√®me ont chang√© et m√©ritent d'√™tre logg√©es
 * @param {Object} currentStats - Statistiques actuelles du syst√®me
 * @param {number} currentStats.users - Nombre d'utilisateurs connect√©s
 * @param {number} currentStats.modules - Nombre de modules connect√©s
 * @param {number} currentStats.clients - Nombre de clients WebSocket
 * @param {number} currentStats.esp - Nombre de modules ESP32 connect√©s
 * @returns {boolean} True si les stats ont chang√©, false sinon
 */
function shouldLogSystemStats(currentStats) {
  if (!lastSystemStats) {
    lastSystemStats = currentStats;
    return true;
  }

  // Comparer les statistiques pour d√©tecter un changement
  const hasChanged =
    lastSystemStats.users !== currentStats.users ||
    lastSystemStats.modules !== currentStats.modules ||
    lastSystemStats.clients !== currentStats.clients ||
    lastSystemStats.esp !== currentStats.esp;

  if (hasChanged) {
    lastSystemStats = currentStats;
    return true;
  }

  return false;
}

// ============================================================================
// LOGGER PRINCIPAL UNIFI√â
// ============================================================================

/**
 * Objet logger principal avec m√©thodes sp√©cialis√©es par domaine
 * @namespace Logger
 * @description Interface unifi√©e pour tous les types de logs de l'application
 */
const logger = {
  /**
   * Logger de l'application principale
   * @namespace Logger.app
   * @description Logs de d√©marrage, arr√™t, erreurs critiques
   */
  app: {
    info: (msg, meta) => appLogger.info(msg, meta),
    warn: (msg, meta) => appLogger.warn(msg, meta),
    error: (msg, meta) => appLogger.error(msg, meta),
    debug: (msg, meta) => appLogger.debug(msg, meta),
  },

  /**
   * Logger d'activit√© utilisateur
   * @namespace Logger.activity
   * @description Logs des connexions, navigation et actions utilisateur
   */
  activity: {
    /**
     * Log d'information d'activit√©
     * @param {string} msg - Message √† logger
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    info: (msg, meta) => activityLogger.info(msg, meta),

    /**
     * Log d'avertissement d'activit√©
     * @param {string} msg - Message d'avertissement
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    warn: (msg, meta) => activityLogger.warn(msg, meta),

    /**
     * Log d'erreur d'activit√©
     * @param {string} msg - Message d'erreur
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    error: (msg, meta) => activityLogger.error(msg, meta),

    /**
     * Log de d√©bogage d'activit√©
     * @param {string} msg - Message de debug
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    debug: (msg, meta) => activityLogger.debug(msg, meta),
  },

  /**
   * Logger des modules IoT
   * @namespace Logger.modules
   * @description Logs des communications ESP32 et t√©l√©m√©trie
   */
  modules: {
    /**
     * Log d'information de module
     * @param {string} msg - Message √† logger
     * @param {Object} [meta] - M√©tadonn√©es (moduleId, command, etc.)
     */
    info: (msg, meta) => modulesLogger.info(msg, meta),

    /**
     * Log d'avertissement de module
     * @param {string} msg - Message d'avertissement
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    warn: (msg, meta) => modulesLogger.warn(msg, meta),

    /**
     * Log d'erreur de module
     * @param {string} msg - Message d'erreur
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    error: (msg, meta) => modulesLogger.error(msg, meta),

    /**
     * Log de d√©bogage de module
     * @param {string} msg - Message de debug
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    debug: (msg, meta) => modulesLogger.debug(msg, meta),
  },

  /**
   * Logger syst√®me et monitoring
   * @namespace Logger.system
   * @description Logs des statistiques et monitoring syst√®me
   */
  system: {
    /**
     * Log d'information syst√®me
     * @param {string} msg - Message √† logger
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    info: (msg, meta) => systemLogger.info(msg, meta),

    /**
     * Log d'avertissement syst√®me
     * @param {string} msg - Message d'avertissement
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    warn: (msg, meta) => systemLogger.warn(msg, meta),

    /**
     * Log d'erreur syst√®me
     * @param {string} msg - Message d'erreur
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    error: (msg, meta) => systemLogger.error(msg, meta),

    /**
     * Log de d√©bogage syst√®me
     * @param {string} msg - Message de debug
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    debug: (msg, meta) => systemLogger.debug(msg, meta),

    /**
     * Log des statistiques avec syst√®me anti-spam
     * @param {string} msg - Message de statistiques
     * @param {Object} stats - Statistiques actuelles pour comparaison
     * @description Ne log que si les statistiques ont chang√© depuis le dernier appel
     */
    statsIfChanged: (msg, stats) => {
      if (shouldLogSystemStats(stats)) {
        systemLogger.info(msg);
      }
    },
  },

  // ============================================================================
  // M√âTHODES DE R√âTROCOMPATIBILIT√â (D√âPR√âCI√âES)
  // ============================================================================

  /**
   * @deprecated Utiliser Logger.app.info, Logger.activity.info, etc.
   * @param {string} msg - Message √† logger
   * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
   */
  info: (msg, meta) => {
    console.warn('‚ö†Ô∏è Logger.info d√©pr√©ci√© - utilisez Logger.app.info, Logger.activity.info, etc.');
    appLogger.info(msg, meta);
  },

  /**
   * @deprecated Utiliser Logger.app.warn, Logger.activity.warn, etc.
   * @param {string} msg - Message d'avertissement
   * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
   */
  warn: (msg, meta) => {
    console.warn('‚ö†Ô∏è Logger.warn d√©pr√©ci√© - utilisez Logger.app.warn, Logger.activity.warn, etc.');
    appLogger.warn(msg, meta);
  },

  /**
   * @deprecated Utiliser Logger.app.error, Logger.activity.error, etc.
   * @param {string} msg - Message d'erreur
   * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
   */
  error: (msg, meta) => {
    console.warn(
      '‚ö†Ô∏è Logger.error d√©pr√©ci√© - utilisez Logger.app.error, Logger.activity.error, etc.'
    );
    appLogger.error(msg, meta);
  },

  /**
   * @deprecated Utiliser Logger.app.debug, Logger.activity.debug, etc.
   * @param {string} msg - Message de d√©bogage
   * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
   */
  debug: (msg, meta) => {
    console.warn(
      '‚ö†Ô∏è Logger.debug d√©pr√©ci√© - utilisez Logger.app.debug, Logger.activity.debug, etc.'
    );
    appLogger.debug(msg, meta);
  },

  /**
   * Logger ESP32 d√©di√©
   * @namespace Logger.esp
   * @description Logs sp√©cifiques aux connexions WebSocket ESP32 natives
   */
  esp: {
    /**
     * Log d'information ESP32
     * @param {string} msg - Message √† logger
     * @param {Object} [meta] - M√©tadonn√©es (socketId, moduleId, etc.)
     */
    info: (msg, meta) => espLogger.info(msg, meta),

    /**
     * Log d'avertissement ESP32
     * @param {string} msg - Message d'avertissement
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    warn: (msg, meta) => espLogger.warn(msg, meta),

    /**
     * Log d'erreur ESP32
     * @param {string} msg - Message d'erreur
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    error: (msg, meta) => espLogger.error(msg, meta),

    /**
     * Log de d√©bogage ESP32
     * @param {string} msg - Message de debug
     * @param {Object} [meta] - M√©tadonn√©es suppl√©mentaires
     */
    debug: (msg, meta) => espLogger.debug(msg, meta),
  },
};

/**
 * Export du logger principal
 * @module Logger
 * @description Syst√®me de journalisation centralis√© pour l'application MicroCoaster
 *
 * @example
 * // Utilisation recommand√©e avec domaines sp√©cifiques
 * const Logger = require('./utils/logger');
 *
 * Logger.app.info('Application d√©marr√©e');
 * Logger.activity.info('Utilisateur connect√©', { userId: 123 });
 * Logger.modules.debug('Commande envoy√©e', { moduleId: 'MC-001', command: 'start' });
 * Logger.esp.warn('Connexion instable', { socketId: 'ws123' });
 * Logger.system.statsIfChanged('Stats mises √† jour', { users: 5, modules: 3 });
 */
module.exports = logger;
