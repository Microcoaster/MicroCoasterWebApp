/**
 * API temps r√©el - Point d'entr√©e principal
 *
 * Orchestrateur central pour tous les gestionnaires d'√©v√©nements WebSocket
 * de l'application MicroCoaster (modules IoT, utilisateurs, administration).
 *
 * @module RealTimeAPI
 * @description Orchestrateur central pour les √©v√©nements WebSocket et fonctionnalit√©s temps r√©el
 */

const EventsManager = require('./EventsManager');
const ModuleEvents = require('./ModuleEvents');
const UserEvents = require('./UserEvents');
const AdminEvents = require('./AdminEvents');
const Logger = require('../utils/logger');

/**
 * Orchestrateur principal de l'API temps r√©el
 * Coordonne tous les gestionnaires d'√©v√©nements WebSocket
 * @class RealTimeAPI
 */
class RealTimeAPI {
  /**
   * Cr√©e une instance de RealTimeAPI
   * @param {Object} io - Instance Socket.IO pour la gestion des connexions WebSocket
   * @param {DatabaseManager} databaseManager - Gestionnaire de base de donn√©es
   */
  constructor(io, databaseManager) {
    this.io = io;
    this.db = databaseManager;
    this.Logger = Logger;
    this.initialized = false;

    this.events = new EventsManager(io);
    this.modules = new ModuleEvents(this.events);
    this.users = new UserEvents(this.events);
    this.admin = new AdminEvents(this.events, databaseManager);
  }

  /**
   * Initialise l'API d'√©v√©nements temps r√©el
   * Configure tous les gestionnaires d'√©v√©nements et marque l'API comme pr√™te
   * @returns {void}
   */
  initialize() {
    if (this.initialized) {
      Logger.app.warn('RealTimeAPI already initialized');
      return;
    }

    Logger.app.info('üöÄ Initializing real-time events API');

    this.initialized = true;
    Logger.app.info('‚úÖ Real-time events API initialized successfully');
  }

  /**
   * G√®re les √©v√©nements client apr√®s enregistrement automatique
   * Appel√© depuis websocket/handlers.js apr√®s l'auto-registration
   * @param {Socket} socket - Socket client connect√©
   * @public
   */
  handleClientEvents(socket) {
    socket.on('client:authenticate', data => {
      this._authenticateClient(socket, data);
    });

    socket.on('disconnect', () => {
      this._handleClientDisconnection(socket);
    });

    socket.on('client:sync:request', () => {
      this._handleSyncRequest(socket);
    });

    socket.on('client:page:changed', data => {
      this._handlePageChange(socket, data);
    });
  }

  /**
   * Authentifie le client et l'enregistre (√©vite la double inscription)
   * @param {Socket} socket - Socket client √† authentifier
   * @param {Object} data - Donn√©es d'authentification
   * @param {string} data.userId - ID de l'utilisateur
   * @param {string} [data.userType='user'] - Type d'utilisateur (user/admin)
   * @param {string} [data.page='unknown'] - Page courante du client
   * @private
   */
  _authenticateClient(socket, data) {
    try {
      const { userId, userType = 'user', page = 'unknown' } = data;

      if (!userId) {
        socket.emit('client:auth:error', { message: 'User ID required' });
        return;
      }

      // V√©rifier si d√©j√† enregistr√© pour √©viter la double inscription
      const existingClient = this.events.connectedClients.get(socket.id);

      if (!existingClient) {
        // Nouveau client - enregistrer
        this.events.registerClient(socket, userId, userType, page);
        socket.isRegisteredWithEventsManager = true;
        Logger.activity.info(
          `Client authenticated via API: ${socket.id} (User ${userId}, Page ${page})`
        );
      } else {
        // Client d√©j√† enregistr√© - mettre √† jour la page seulement
        const oldPage = existingClient.page;
        existingClient.page = page;
        if (oldPage !== page) {
          Logger.activity.debug(`üìÑ ${this.getUserName(socket)} navigated: ${oldPage} ‚Üí ${page}`);
        }
      }

      socket.emit('client:auth:success', {
        message: 'Authenticated successfully',
        timestamp: new Date(),
      });

      this._sendInitialState(socket, page);
    } catch (error) {
      Logger.activity.error('Error authenticating client:', error);
      socket.emit('client:auth:error', { message: 'Authentication failed' });
    }
  }

  /**
   * G√®re la d√©connexion d'un client
   * D√©senregistre le client et nettoie les ressources
   * @param {Socket} socket - Socket client d√©connect√©
   * @private
   */
  _handleClientDisconnection(socket) {
    this.events.unregisterClient(socket.id);
    Logger.activity.debug(`Client disconnected: ${socket.id}`);
  }

  /**
   * G√®re les demandes de synchronisation client
   * Renvoie l'√©tat initial bas√© sur la page courante
   * @param {Socket} socket - Socket client demandant la synchronisation
   * @private
   */
  _handleSyncRequest(socket) {
    const client = this.events.connectedClients.get(socket.id);
    if (!client) {
      socket.emit('client:sync:error', { message: 'Not authenticated' });
      return;
    }

    this._sendInitialState(socket, client.page);
    socket.emit('client:sync:success', { timestamp: new Date() });
  }

  /**
   * G√®re le changement de page d'un client
   * Met √† jour la page courante et synchronise l'√©tat
   * @param {Socket} socket - Socket client
   * @param {Object} data - Donn√©es du changement de page
   * @param {string} data.page - Nouvelle page
   * @private
   */
  _handlePageChange(socket, data) {
    const client = this.events.connectedClients.get(socket.id);
    if (client) {
      client.page = data.page || 'unknown';
      Logger.activity.info(`Client ${socket.id} changed to page: ${client.page}`);
      this._sendInitialState(socket, client.page);
    }
  }

  /**
   * Envoie l'√©tat initial bas√© sur la page courante
   * Synchronise les donn√©es sp√©cifiques √† chaque page
   * @param {Socket} socket - Socket client
   * @param {string} page - Page courante du client
   * @returns {Promise<void>}
   * @private
   */
  async _sendInitialState(socket, page) {
    try {
      switch (page) {
        case 'modules': {
          const moduleStates = this.modules.getCurrentStates();
          socket.emit('modules:initial:state', moduleStates);
          break;
        }

        case 'dashboard':
          socket.emit('dashboard:initial:summary', {
            timestamp: new Date(),
            message: 'Dashboard synchronized',
          });
          break;
      }
    } catch (error) {
      Logger.app.error(`Error sending initial state for page ${page}:`, error);
    }
  }

  /**
   * √âmet un √©v√©nement de module en ligne
   * @param {string} moduleId - ID du module
   * @param {Object} moduleInfo - Informations du module
   */
  emitModuleOnline(moduleId, moduleInfo) {
    this.modules.moduleOnline(moduleId, moduleInfo);
  }

  /**
   * √âmet un √©v√©nement de module hors ligne
   * @param {string} moduleId - ID du module
   * @param {Object} moduleInfo - Informations du module
   */
  emitModuleOffline(moduleId, moduleInfo) {
    this.modules.moduleOffline(moduleId, moduleInfo);
  }

  /**
   * √âmet un √©v√©nement d'ajout de module
   * @param {Object} moduleData - Donn√©es du nouveau module
   */
  emitModuleAdded(moduleData) {
    this.modules.moduleAdded(moduleData);
  }

  /**
   * √âmet un √©v√©nement de suppression de module
   * @param {Object} moduleData - Donn√©es du module supprim√©
   */
  emitModuleRemoved(moduleData) {
    this.modules.moduleRemoved(moduleData);
  }

  /**
   * √âmet un √©v√©nement de mise √† jour de module
   * @param {Object} moduleData - Donn√©es du module mis √† jour
   */
  emitModuleUpdated(moduleData) {
    this.modules.moduleUpdated(moduleData);
  }

  /**
   * √âmet une mise √† jour de t√©l√©m√©trie
   * @param {string} moduleId - ID du module
   * @param {Object} telemetryData - Donn√©es de t√©l√©m√©trie
   */
  emitTelemetryUpdate(moduleId, telemetryData) {
    this.modules.telemetryUpdated(moduleId, telemetryData);
  }

  /**
   * √âmet un √©v√©nement de commande envoy√©e
   * @param {string} moduleId - ID du module cible
   * @param {Object} command - Commande envoy√©e
   * @param {string} userId - ID de l'utilisateur √©metteur
   */
  emitCommandSent(moduleId, command, userId) {
    this.modules.commandSent(moduleId, command, userId);
  }

  /**
   * √âmet un √©v√©nement de connexion utilisateur
   * @param {Object} userData - Donn√©es de l'utilisateur
   * @param {string} sessionId - ID de session
   */
  emitUserLoggedIn(userData, sessionId) {
    this.users.userLoggedIn(userData, sessionId);
  }

  /**
   * √âmet un √©v√©nement de d√©connexion utilisateur
   * @param {Object} userData - Donn√©es de l'utilisateur
   * @param {string} sessionId - ID de session
   */
  emitUserLoggedOut(userData, sessionId) {
    this.users.userLoggedOut(userData, sessionId);
  }

  /**
   * √âmet un √©v√©nement de mise √† jour de profil
   * @param {Object} userData - Donn√©es utilisateur mises √† jour
   * @param {string} sessionId - ID de session
   */
  emitUserProfileUpdated(userData, sessionId) {
    this.users.userProfileUpdated(userData, sessionId);
  }

  /**
   * √âmet un √©v√©nement de changement de mot de passe
   * @param {Object} userData - Donn√©es de l'utilisateur
   */
  emitUserPasswordChanged(userData) {
    this.users.userPasswordChanged(userData);
  }

  /**
   * √âmet un √©v√©nement d'inscription d'utilisateur
   * @param {Object} userData - Donn√©es du nouvel utilisateur
   */
  emitUserRegistered(userData) {
    this.users.userRegistered(userData);
  }

  /**
   * √âmet un √©v√©nement d'activit√© utilisateur
   * @param {string} userId - ID de l'utilisateur
   * @param {string} activity - Type d'activit√©
   * @param {Object} metadata - M√©tadonn√©es de l'activit√©
   */
  emitUserActivity(userId, activity, metadata) {
    this.users.userActivity(userId, activity, metadata);
  }

  /**
   * √âmet un √©v√©nement d'action administrative
   * @param {string} adminUserId - ID de l'administrateur
   * @param {string} action - Action effectu√©e
   * @param {Object} details - D√©tails de l'action
   */
  emitAdminAction(adminUserId, action, details) {
    this.admin.adminAction(adminUserId, action, details);
  }

  /**
   * √âmet un √©v√©nement de changement de liste utilisateurs
   * @param {string} changeType - Type de changement (added/removed/updated)
   * @param {Object} userData - Donn√©es utilisateur affect√©es
   */
  emitUserListChanged(changeType, userData) {
    this.admin.userListChanged(changeType, userData);
  }

  /**
   * √âmet un √©v√©nement de changement de liste modules
   * @param {string} changeType - Type de changement (added/removed/updated)
   * @param {Object} moduleData - Donn√©es module affect√©es
   */
  emitModuleListChanged(changeType, moduleData) {
    this.admin.moduleListChanged(changeType, moduleData);
  }

  /**
   * √âmet un √©v√©nement de mode maintenance
   * @param {boolean} inMaintenance - √âtat du mode maintenance
   * @param {string} reason - Raison du changement
   * @param {string} adminUserId - ID de l'administrateur
   */
  emitMaintenanceMode(inMaintenance, reason, adminUserId) {
    this.admin.maintenanceMode(inMaintenance, reason, adminUserId);
  }

  /**
   * √âmet une alerte syst√®me
   * @param {string} level - Niveau d'alerte (info/warning/error)
   * @param {string} message - Message d'alerte
   * @param {Object} details - D√©tails suppl√©mentaires
   */
  emitSystemAlert(level, message, details) {
    this.admin.systemAlert(level, message, details);
  }

  /**
   * √âmet des donn√©es de performance serveur
   * @param {Object} performanceData - Donn√©es de performance
   */
  emitServerPerformance(performanceData) {
    this.admin.serverPerformance(performanceData);
  }

  /**
   * R√©cup√®re les statistiques globales de l'API
   * @returns {Object} Statistiques compl√®tes des √©v√©nements, modules et utilisateurs
   * @returns {Object} returns.events - Statistiques des √©v√©nements
   * @returns {Object} returns.modules - Statistiques des connexions modules
   * @returns {Object} returns.users - Statistiques des utilisateurs connect√©s
   * @returns {boolean} returns.initialized - √âtat d'initialisation
   */
  getStats() {
    return {
      events: this.events.getStats(),
      modules: this.modules.getConnectionStats(),
      users: this.users.getConnectedUsersStats(),
      initialized: this.initialized,
    };
  }

  /**
   * V√©rifie si l'API est initialis√©e
   * @returns {boolean} √âtat d'initialisation
   */
  isInitialized() {
    return this.initialized;
  }

  /**
   * R√©cup√®re le nom d'utilisateur depuis un socket
   * @param {Socket} socket - Socket client
   * @returns {string} Nom d'utilisateur ou 'Utilisateur Anonyme'
   * @private
   */
  getUserName(socket) {
    return socket.session?.user?.username || 'Utilisateur Anonyme';
  }
}

module.exports = RealTimeAPI;
